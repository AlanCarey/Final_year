/**
 * Class used to show and setup the action listeners
 * 
 * @author G00269534(Alan carey)
 * @version 1.0
 * @since 08-04-2015
 */

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;

import com.leapmotion.leap.Controller;

public class ActionListeners {

	private CreateAndShowGui showGUI;
	private LeapListener listener;
	private Controller controller;
	private DataBase database;
	private EstablishConnection establishCon;
	
	/**
	 * Constructor to pass reference of objects 
	 * 
	 * @param showGUI GUI object
	 * @param listener Listener object
	 * @param controller Controller Object
	 * @param establishCon EstablishConnection object
	 * @param database Database object
	 */
	
	public ActionListeners(CreateAndShowGui showGUI, LeapListener listener, Controller controller, EstablishConnection establishCon, DataBase database) {
		
		this.showGUI = showGUI;
		this.listener = listener;
		this.controller = controller;
		this.database = database;
		this.establishCon = establishCon;
	}
	
	/**
	 * This methods creates all action listeners for the application
	 * 
	 */
	
	public void setUpActionListeners() {
		
		/**********************************************************************************************************************
		 * 
		 * JButtActivate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtActivate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				showGUI.setAllLeapDataFields("0");
				
				controller.addListener(listener);
				showGUI.jButtActivate.setEnabled(false);
				
				showGUI.jButtSendData.setEnabled(true);
				showGUI.jButtDeactivate.setEnabled(true);
				//showGUI.jButtStartRecording.setEnabled(true);
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Leap Activated");
				}
				showGUI.lblLED1.setForeground(Color.GREEN);
				
			}
		}); 
		
		/**********************************************************************************************************************
		 * 
		 * JButtDeacivate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtDeactivate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				if(establishCon.isInService() == true) {
					
					if(establishCon.closeConnection() == true) {
						
						if(listener.isSystemStatsFlag() == true){
							showGUI.printStatus("OK");
						}
						
					}
					else {
					
						if(listener.isSystemStatsFlag() == true){
							showGUI.printStatus("Failed to Close Connection");
						}
						
					}
					
				}
				
				controller.removeListener(listener);
				showGUI.jButtSendData.setEnabled(false);
				showGUI.jButtCloseData.setEnabled(false);
				showGUI.jButtDeactivate.setEnabled(false);
				showGUI.jButtStartRecording.setEnabled(false);
				showGUI.jButtStopRecording.setEnabled(false);
				showGUI.jButtResetArm.setEnabled(false);
				showGUI.jButtStopArm.setEnabled(false);
				showGUI.jButtActivate.setEnabled(true);
				showGUI.JButtOpenStream.setEnabled(false);
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Leap Deactivated");				
				}

				showGUI.lblLED1.setForeground(Color.RED);
											
				showGUI.setAllLeapDataFields("0");
				
				establishCon.setInService(false);
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtSendData ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtSendData.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Opening Connection ... ");	
				}
				
				if(establishCon.makeConnection() == true) {
					
					establishCon.setInService(true);
					
					showGUI.jButtSendData.setEnabled(false);
					showGUI.jButtCloseData.setEnabled(true);
					showGUI.jButtStartRecording.setEnabled(true);
					showGUI.jButtStopArm.setEnabled(true);
					showGUI.jButtResetArm.setEnabled(true);
					showGUI.JButtOpenStream.setEnabled(true);
					
					showGUI.lblLED2.setForeground(Color.GREEN);
					
					if(listener.isSystemStatsFlag() == true){
						showGUI.printStatus("OK");
					}
				}
				else {
					if(listener.isSystemStatsFlag() == true){
						showGUI.printStatus("Failed to make the connection");
					}
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtCloseData ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtCloseData.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Closing Connection ... ");
				}
				
				if(establishCon.closeConnection() == true) {
					
					establishCon.setInService(false);
					
					showGUI.jButtSendData.setEnabled(true);
					showGUI.jButtCloseData.setEnabled(false);	
					showGUI.jButtStartRecording.setEnabled(false);
					showGUI.jButtStopArm.setEnabled(false);
					showGUI.jButtPlayRecord.setEnabled(false);
					showGUI.jButtResetArm.setEnabled(false);
					showGUI.jButtStopArm.setEnabled(false);
					showGUI.JButtOpenStream.setEnabled(false);
					
					showGUI.lblLED2.setForeground(Color.RED);
					
					if(listener.isSystemStatsFlag() == true){
						showGUI.printStatus("Ok");
					}
				}
				else { 
					
					if(listener.isSystemStatsFlag() == true){
						showGUI.printStatus("Failed to close the connection");
					}
					
				}
								
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStopSystemStats ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtStopSystemStats.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				showGUI.lblLED3.setForeground(Color.RED);
				listener.setSystemStatsFlag(false);
				showGUI.jButtStartSystemStats.setEnabled(true);
				showGUI.jButtStopSystemStats.setEnabled(false);
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStartSystemStats ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtStartSystemStats.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				showGUI.lblLED3.setForeground(Color.GREEN);
				listener.setSystemStatsFlag(true);
				showGUI.jButtStopSystemStats.setEnabled(true);
				showGUI.jButtStartSystemStats.setEnabled(false);
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStopLeapData ActionListener
		 * 
		 **********************************************************************************************************************/		
		
		showGUI.jButtStopLeapData.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				showGUI.lblLED4.setForeground(Color.RED);
				listener.setLeapDataFlag(false);
				showGUI.jButtStartLeapData.setEnabled(true);
				showGUI.jButtStopLeapData.setEnabled(false);
				showGUI.setAllLeapDataFields("0");
			}
		});

		/**********************************************************************************************************************
		 * 
		 * JButtStartLeapData ActionListener
		 * 
		 **********************************************************************************************************************/		
		
		showGUI.jButtStartLeapData.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				
				showGUI.lblLED4.setForeground(Color.GREEN);
				listener.setLeapDataFlag(true);
				showGUI.jButtStopLeapData.setEnabled(true);
				showGUI.jButtStartLeapData.setEnabled(false);
				showGUI.setAllLeapDataFields("0");
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStartRecording ActionListener
		 * 
		 **********************************************************************************************************************/		
		
		showGUI.jButtStartRecording.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				showGUI.jButtStopRecording.setEnabled(true);
				showGUI.jButtStartRecording.setEnabled(false);
				
				listener.recordedData.clear();
				
				establishCon.setInService(false);
				establishCon.setInRecordService(true);
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Recording ... ");
				}	
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStopRecording ActionListener
		 * 
		 **********************************************************************************************************************/		
		
		showGUI.jButtStopRecording.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				showGUI.jButtStopRecording.setEnabled(false);
				showGUI.jButtStartRecording.setEnabled(true);			
				
				establishCon.setInRecordService(false);
				establishCon.setInService(true);
				
				if(listener.isSystemStatsFlag() == true){
					showGUI.printStatus("Recording Stopped");
				}
				showGUI.jButtPlayRecord.setEnabled(true);
			}
		});
		
		
		/**********************************************************************************************************************
		 * 
		 * JButtPlayRecord ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtPlayRecord.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			
				if(listener.isSystemStatsFlag() == true) {
					
					if(listener.recordedData.size() > 0)
					{
						showGUI.printStatus("Playing ...");
					}
					else {
						showGUI.printStatus("No Recoding set.");
					}
				}
				listener.sendRecordedData();
				establishCon.setInService(true);
				establishCon.setInRecordService(false);
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtResetArm ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtResetArm.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				//send the reset signal to the pi
				listener.sendResetSignal();
				showGUI.jButtStopArm.setEnabled(true);
				showGUI.jButtPlayRecord.setEnabled(true);
				establishCon.setInService(true);
				
				if(listener.isSystemStatsFlag() == true) {
					
					showGUI.printStatus("Arm In Default Position");
					
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtStopArm ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtStopArm.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				//send the stop signal to the arm
				listener.sendPowerOffSignal();
				showGUI.jButtStopArm.setEnabled(false);
				showGUI.jButtResetArm.setEnabled(true);
				showGUI.jButtPlayRecord.setEnabled(false);
				establishCon.setInService(false);
				
				if(listener.isSystemStatsFlag() == true) {
					
					showGUI.printStatus("Arm Powered Off");
					
				}
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtLogin ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtLogin.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
					
					System.out.println("Before connect");
					database.connect();
					System.out.println("After");
					
					if(database.login() == true) {
						System.out.println("Here");
						showGUI.currentUserData.setVisible(true);
						showGUI.login.setVisible(false);
						showGUI.createNewUser.setVisible(false);
						showGUI.jTextFieldCreateUserName.setText("");
						showGUI.jPasswordFieldCreatePassword.setText("");
						showGUI.jButtCurUpdate.setEnabled(true);
						
						database.updateLoginTime();
						database.currentUserReadData();
						
					}
				} catch (Exception e1) {
					System.out.println(e1.getMessage());
					e1.printStackTrace();
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtCurSignOut ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtCurSignOut.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
					database.signout();
					showGUI.login.setVisible(true);
					showGUI.currentUserData.setVisible(false);
					showGUI.newUserData.setVisible(false);
					showGUI.jButtCurUpdate.setEnabled(true);
					
					showGUI.jTextFieldUserName.setText("");
					showGUI.jPasswordFieldPassword.setText("");
					
					showGUI.jTextAreaNewNotes.setText("");
					
					//System.out.println("User = " + database.getCurrentUsername());
					//System.out.println("P Hand = " + database.getPreferred());
					
					
					database.setCurrentUsername("");
					database.setPreferred("");
					
					//System.out.println("After Set");
					
					//System.out.println("User = " + database.getCurrentUsername());
					//System.out.println("P Hand = " + database.getPreferred());
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtCurUpdate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtCurUpdate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				showGUI.newUserData.setVisible(true);
				showGUI.jButtCurUpdate.setEnabled(false);
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtNewUpdate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtNewUpdate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
					database.updateData();
					showGUI.newUserData.setVisible(false);
					showGUI.jButtCurUpdate.setEnabled(true);
					database.currentUserReadData();
					showGUI.jTextAreaNewNotes.setText("");
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtCreateNewUser ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtCreateNewUser.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				//set gui visible
				showGUI.createNewUser.setVisible(true);
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtCancelCreate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtCancelCreate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				//clear fields and vet visible to false
				
				showGUI.jTextFieldCreateUserName.setText("");
				showGUI.jPasswordFieldCreatePassword.setText("");
				
				showGUI.createNewUser.setVisible(false);
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtConfirmCreate ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.jButtConfirmCreate.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
					database.connect();
					database.addNewUser();
					database.closeConnection();
					showGUI.jTextFieldCreateUserName.setText("");
					showGUI.jPasswordFieldCreatePassword.setText("");
					
					showGUI.createNewUser.setVisible(false);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				
			}
		});
		
		/**********************************************************************************************************************
		 * 
		 * JButtOpenStream ActionListener
		 * 
		 **********************************************************************************************************************/
		
		showGUI.JButtOpenStream.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				try {
				    Desktop.getDesktop().browse(new URL("http://" + establishCon.getIP()).toURI());
				} catch (Exception e1) {
					
				}
				
			}
		});
		
	}
	
	
}
