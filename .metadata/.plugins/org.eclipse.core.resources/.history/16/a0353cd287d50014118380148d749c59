import java.util.ArrayList;
import com.leapmotion.leap.*;

public class LeapListener extends Listener {

	private CreateAndShowGui showGUI = null;
	
	private EstablishConnection establishCon = null;
	
	private DataBase database = null;
	
	private boolean systemStatsFlag = true;
	
	private boolean leapDataFlag = true;
	
	private float x;
	private float y;
	private float z;
	
	private String handType;
	
	private float pinch;
	
	private String data;
	
	private Vector normal;
	
	private Vector direction;
	
	private Frame frame;
	
	protected ArrayList<String> recordedData = new ArrayList<>();
	
	public LeapListener(CreateAndShowGui showGUI, EstablishConnection establishCon, DataBase database) {
		
		this.showGUI = showGUI;
		this.establishCon = establishCon;
		this.database = database;
		
	}
	
	public void onInit(Controller controller){
		
		if(isSystemStatsFlag() == true){
			showGUI.printStatus("Initialised");
			//System.out.println("Initialised");	
		}
	}
	
	public void onConnect(Controller controller){
		if(isSystemStatsFlag() == true){
			showGUI.printStatus("Connected to Motion Sensor");
			//System.out.println("Connected to Motion Sensor");
		}
		
		controller.enableGesture(Gesture.Type.TYPE_SWIPE);
		controller.enableGesture(Gesture.Type.TYPE_CIRCLE);
		controller.enableGesture(Gesture.Type.TYPE_SCREEN_TAP);
		controller.enableGesture(Gesture.Type.TYPE_KEY_TAP);

	}
	
	public void onDisconnect(Controller controller){
		
		if(isSystemStatsFlag() == true){
			showGUI.printStatus("Motion Sensor Disconnected");
			//System.out.println("Motion Sensor Disconnected");
		}

		
	}
	
	public void OnExit(Controller controller){
	
		if(isSystemStatsFlag() == true){
			showGUI.printStatus("Exited");
			//System.out.println("Exited");
		}
	}
	
	public void onFrame(Controller controller){
		
		/*Frame Data */
		frame = controller.frame();
		
		/* Hand Data */
		for(Hand hand: frame.hands()){
			
			handType = hand.isLeft() ? "Left Hand" : "Right Hand";

			if(database.getCurrentUsername().equals("")) {
			
				pinch = hand.pinchStrength();
				pinch = pinch*100;
				
				//fix this showGUI.printStringData(data);
							
				normal = hand.palmPosition();
				direction = hand.direction();
				
				x = normal.getX();
				y = normal.getY();
				z = normal.getZ();
				
				data = (int)x + ":" + (int)y + ":" + (int)z + ":" + (int)pinch;
				
				if(isLeapDataFlag() == true){
					
					showGUI.printFrameID("" + frame.id());
					showGUI.printHands("" + frame.hands().count());
					showGUI.printFingers("" + frame.fingers().count());
					showGUI.printTools("" + frame.tools().count());
					showGUI.printGestures("" + frame.gestures().count());
					
					showGUI.printLeftRight(handType);
					showGUI.printPalmPosition("" + hand.palmPosition());
					
					showGUI.printX("" + normal.getX());
					showGUI.printY("" + normal.getY());
					showGUI.printZ("" + normal.getZ());
					
					showGUI.printYaw("" + Math.toDegrees(direction.yaw()));
					showGUI.printRoll("" + Math.toDegrees(normal.roll()));
				}
				
				if(establishCon.isInService() == true && establishCon.isInRecordService() == false) {
					establishCon.sendTheData(data);
				}
				if(establishCon.isInService() == false && establishCon.isInRecordService() == true) {
					System.out.println("In here");
					recordedData.add(data);
				}
			}	
			else if(!database.getCurrentUsername().equals("")) {
				
				String perHandType = database.getPreferred();
				
				System.out.println("handType = " + handType + "Perfer = " + perHandType);
				
				if((String)handType == (String)perHandType) {
				
					pinch = hand.pinchStrength();
					pinch = pinch*100;
					
					//fix this showGUI.printStringData(data);
								
					normal = hand.palmPosition();
					direction = hand.direction();
					
					x = normal.getX();
					y = normal.getY();
					z = normal.getZ();
					
					data = (int)x + ":" + (int)y + ":" + (int)z + ":" + (int)pinch;
					
					if(isLeapDataFlag() == true){
						
						showGUI.printFrameID("" + frame.id());
						showGUI.printHands("" + frame.hands().count());
						showGUI.printFingers("" + frame.fingers().count());
						showGUI.printTools("" + frame.tools().count());
						showGUI.printGestures("" + frame.gestures().count());
						
						showGUI.printLeftRight(handType);
						showGUI.printPalmPosition("" + hand.palmPosition());
						
						showGUI.printX("" + normal.getX());
						showGUI.printY("" + normal.getY());
						showGUI.printZ("" + normal.getZ());
						
						showGUI.printYaw("" + Math.toDegrees(direction.yaw()));
						showGUI.printRoll("" + Math.toDegrees(normal.roll()));
					}
					
					if(establishCon.isInService() == true && establishCon.isInRecordService() == false) {
						establishCon.sendTheData(data);
					}
					if(establishCon.isInService() == false && establishCon.isInRecordService() == true) {
						System.out.println("In here");
						recordedData.add(data);
					}
					
				}
				else {
					
					System.out.println("Not your preferred Hand, Switch god damnit!");
					
				}
				
			}
		}	
	}
	
	public void sendPowerOffSignal() {
		
		establishCon.sendTheData("0");
		
	}
	
	public void sendResetSignal() {
		
		establishCon.sendTheData("1");
		
	}
	
	public void sendRecordedData() {
		
		for(String arrayData: recordedData) {
			
			establishCon.sendTheData(arrayData);
			//System.out.println(arrayData);
		}
	}
	
	public boolean isSystemStatsFlag() {
		return systemStatsFlag;
	}

	public void setSystemStatsFlag(boolean systemStatsFlag) {
		this.systemStatsFlag = systemStatsFlag;
	}

	public boolean isLeapDataFlag() {
		return leapDataFlag;
	}

	public void setLeapDataFlag(boolean leapDataFlag) {
		this.leapDataFlag = leapDataFlag;
	}	
}
